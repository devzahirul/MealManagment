// Generated by Dagger (https://dagger.dev).
package com.ugo.mhews.mealmanage.data.user;

import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.firestore.FirebaseFirestore;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@ScopeMetadata
@QualifierMetadata("com.ugo.mhews.mealmanage.core.di.IoDispatcher")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class UserRepositoryImpl_Factory implements Factory<UserRepositoryImpl> {
  private final Provider<FirebaseFirestore> dbProvider;

  private final Provider<FirebaseAuth> authProvider;

  private final Provider<CoroutineDispatcher> ioDispatcherProvider;

  public UserRepositoryImpl_Factory(Provider<FirebaseFirestore> dbProvider,
      Provider<FirebaseAuth> authProvider, Provider<CoroutineDispatcher> ioDispatcherProvider) {
    this.dbProvider = dbProvider;
    this.authProvider = authProvider;
    this.ioDispatcherProvider = ioDispatcherProvider;
  }

  @Override
  public UserRepositoryImpl get() {
    return newInstance(dbProvider.get(), authProvider.get(), ioDispatcherProvider.get());
  }

  public static UserRepositoryImpl_Factory create(Provider<FirebaseFirestore> dbProvider,
      Provider<FirebaseAuth> authProvider, Provider<CoroutineDispatcher> ioDispatcherProvider) {
    return new UserRepositoryImpl_Factory(dbProvider, authProvider, ioDispatcherProvider);
  }

  public static UserRepositoryImpl newInstance(FirebaseFirestore db, FirebaseAuth auth,
      CoroutineDispatcher ioDispatcher) {
    return new UserRepositoryImpl(db, auth, ioDispatcher);
  }
}
